#!/bin/env python
# Copyright 2024 KillZwitch Team
# https://github.com/kzcz
# Author: kzzc@proton.me
# This file is licensed under the GPL version 3 and later

# Note: files that import other files might not work because the dependencies might not be installed, it is recommended you inline the code you import to avoid crashes or bugs.
from random import choice
from base import ask
import gzip, zlib, lzma, sys, ast
algs="gzip","zlib","lzma"
def c_gzip(stream: str) -> bytes:
    return gzip.compress(stream.encode("utf-8"),compresslevel=9)
def c_zlib(stream: str) -> bytes:
    cmp = zlib.compressobj(level=9, memLevel=9, method=zlib.DEFLATED, wbits=zlib.MAX_WBITS, strategy=zlib.Z_FILTERED)
    return cmp.compress(stream.encode("utf-8")) + cmp.flush()
def c_lzma(stream: str) -> bytes:
    return lzma.compress(stream.encode("utf-8"),preset=lzma.PRESET_EXTREME)
files: dict[str,bytes]={}
def check(stream: str) -> Exception | str:
    try: ast.unparse(ast.parse(stream))
    except Exception as e: return e
    return stream
def pull(file: str) -> str:
    with open(file) as f:
        cnt: str = f.read()
        f.close()
        return cnt
def pack(files: dict[str,bytes], calg: str, reqpkg: list[str], note: str):
    fmt_fcnt=lambda lns: f"""# Warning: this file contains binary data that might get corrupted
# Do not edit this file unless you know what you're doing
W=globals().copy()
import {calg}
W.update({{'__name__':'__main__'}})
{lns}
a={files}
print('files in this archive: {', '.join(files.keys())}')
if (f:=input('enter file to execute: ')) not in a: exit('File not found.')
exec({c2}.decompress(a[f]),W,W)"""
    _lns=''
    if note: _lns+=f"print('note: '{note!r})\n"
    if reqpkg: _lns+=f"from importlib.metadata import distributions as dist\ninst_pkgs = {{pkg.metadata['Name'].lower() for pkg in dist()}}\nmissing_pkgs = [pkg for pkg in {reqpkg} if pkg.lower() not in inst_pkgs]\nif missing_pkgs: exit('Missing packages:'+' '.join(missing_pkgs))\n"
    return fmt_fcnt(_lns)
lsav=len(sys.argv)
if lsav>1:
    raise # WIP
else:
    print("Copyright 2024 KillZwitch Team")
    print("What compressor do you want to use? [gzip, zlib or lzma, empty selects a random one]")
    if (comp:=input("> ").strip().lower()) not in (*algs, ""): exit("choose a valid algorithm")
    if not comp: print("Randomly selected: "+(comp:=choice(algs)))
    outf=input("Enter output file > ").strip()
    c2=comp
    pkgl=[]
    nt=''
    comp = globals()["c_"+comp]
    print("Put every file in a new line, you may use absolute or relative paths")
    while f:=input("Files > ").strip():
        if f in files:
            print(f+" was already selected, try a different file.")
            continue
        try:
            n=check(pull(f))
            if type(n)!=str:
                print("That file ({f}) has invalid python code.")
                continue
            files[f]=comp(n)
        except FileNotFoundError: exit("The file doesn't exist.")
        except PermissionError: exit("You don't have permission to open that file.")
        except IsADirectoryError: exit("That path was a directory.")
        except Exception as e: exit(f"Unexpected error: {e!r}")
    if not files: exit("Can't create an empty archive.")
    print(f"Files that will be added: {' '.join(files.keys())}")
    if ask("Require packages to be installed",False):
        pkgl=[]
        print("Enter only a single package per line.")
        while pk:=input("Packages > ").strip().lower():
            if pk in pkgl:
                print("That package is already set to be required.")
                continue
            pkgl.append(pk)
        if not pkgl: print("Skipping: Empty require list.")
        else: print(f"packages that will be needed: {' '.join(pkgl)}")    
    if ask("Add a comment",False):
        nt=input('Enter the comment to add to the archive > ').strip()
        if not nt: print("Skipping: Empty note.")
    try:
        with open(outf,"w") as of:
            of.write(pack(files,c2,pkgl,nt))
            of.close()
    except Exception as e:
        exit(f"Got exception {e!r} while writing to {outf}")
    
